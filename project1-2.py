# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AlSBTQMe3At6aofyKDN43mIQe4tmmaSf

**Opening CSV File with Data**
"""

import pandas as pd
file_path = "/content/alzheimers_prediction_dataset.csv"
import os
if os.path.exists(file_path):
    df = pd.read_csv(file_path)
    print(df.head(8))
else:
    print("File not found. Please upload it again.")

"""**Importing Libraries**:"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df.info()

df['Country'].head(9)

"""**Cleaning the DataSet**"""

df.duplicated().sum()

df.describe()

from matplotlib import pyplot as plt
_df_5.plot(kind='scatter', x='Education Level', y='BMI', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

"""**Dropping Missing Intervals and Removing Duplictaes**"""

df.dropna(inplace=True)

df.drop_duplicates(inplace=True)

df['BMI']=pd.to_datetime(df['BMI'])
print(df['BMI'].dtypes)

df['BMI']=df['BMI'].dt.year
df['BMI'].dtypes

def catigorize_col(df,col,labels):
  edges=[df[col].describe()['min'],
         df[col].describe()['25%'],
         df[col].describe()['50%'],
         df[col].describe()['75%'],
         df[col].describe()['max']]
  df[col]=pd.cut(df[col],
                 bins=edges,
                 labels=labels,
                 include_lowest=True)
  return df

labels=['very_low','low','medium','high']
catigorize_col(df,'Education Level',labels)
df['Education Level'].unique()

df.head()

df['Education Level'].value_counts()

"""# **Calculating a Risk of Alzheimer**"""

def calculate_risk(row):
  score=0
  if row['Age'] > 65: score += 2
  if row['Family History of Alzheimer’s'] == 'Yes': score += 3
  if row['Genetic Risk Factor (APOE-ε4 allele)'] == 'Yes': score += 4
  if row['Hypertension'] == 'Yes': score += 2
  if row['Diabetes'] == 'Yes': score += 2
  if row['Cholesterol Level'] == 'High': score += 2
  if row['Depression Level'] == 'High': score += 2
  if row['Sleep Quality'] == 'Poor': score += 2
  if row['Physical Activity Level'] == 'Low': score += 2
  return score
df['Alzheimer_Risk_Score'] = df.apply(calculate_risk, axis=1)

df.head()

"""# **Adding a column for BMI Categorization**"""

def catigorize_bmi(bmi):
  if bmi<18.5:
    return "Underweight"
  elif 18.5 <= bmi < 25: return "Normal"
  elif 25 <= bmi < 30: return "Overweight"
  else: return "Obese"
df['BMI Category'] = df['BMI'].apply(catigorize_bmi)

df.head(7)

"""# **Age Group Analysis**"""

df['Age Group']=pd.cut(df['Age'],bins=[0,2,17,65,99],labels=['Baby','Child','Adult','Senior'])

df.head(5)

"""# **Factors are strongly related to Alzheimer's**"""

import seaborn as sns
import matplotlib.pyplot as plt
numeric_df = df.select_dtypes(include=['number'])
plt.figure(figsize=(12, 8))
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Between Numerical Features')
plt.show()

df.rename(columns={'Cholesterol level': 'Cholesterol Level'}, inplace=True)
df.rename(columns={'Physical_Activity_Level': 'Physical Activity Level'}, inplace=True)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv("/content/alzheimers_prediction_dataset.csv")

features = ['Age', 'Education Level', 'BMI', 'Hypertension', 'Diabetes', 'Physical Activity Level', 'Cholesterol Level']
existing_features = [col for col in features if col in df.columns]
X = df[existing_features]

target_column = 'Alzheimer’s Diagnosis'
if target_column in df.columns:
    y = df[target_column]
else:
    raise KeyError(f"Column '{target_column}' not found in dataset.")

categorical_columns = X.select_dtypes(include=['object']).columns

for col in categorical_columns:
    X.loc[:, col] = LabelEncoder().fit_transform(X[col])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_test_scaled)

accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", xticklabels=['No', 'Yes'], yticklabels=['No', 'Yes'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()